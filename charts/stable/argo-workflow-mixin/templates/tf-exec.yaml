
{{- $dot := . -}}
{{- range $k, $v := .Values.configurationWorkflows }}
{{- $type := (default "terraform" $v.type) }}
# {{ $type }}
apiVersion: argoproj.io/v1alpha1
kind: WorkflowTemplate
metadata:
  name: {{$k}}
  labels:
    {{- include "argo-workflows-execution.labels" $dot | nindent 4 }}
spec:
  entrypoint: exec
  arguments:
    parameters:
    - name: revision
      value: "{{ $v.source.revision }}" #master
    {{- if eq "terraform" $type }}
    - name: action
      value: {{ $v.terraform.action }}
    {{- end }}
    - name: path
      value: {{ $v.source.path }}

  templates:
  - name: exec
    metadata:
      annotations:
        vault.hashicorp.com/agent-inject: "true"
        vault.hashicorp.com/role: "argo-workflows"
        vault.hashicorp.com/agent-inject-token: "true"
        vault.hashicorp.com/agent-inject-secret-s3access: secrets-tf/services/s3/users/admin
        vault.hashicorp.com/agent-inject-template-s3access: |
          {{"{{-"}} with secret "secrets-tf/services/s3/users/admin" {{ "-}}" }}
          [default]
          aws_access_key_id={{"{{"}} .Data.data.accesskey {{ "}}" }}
          aws_secret_access_key={{"{{"}} .Data.data.secretkey {{ "}}" }}
          {{"{{-"}} end {{ "}}" }}
        {{- with $v.extraAnnotations }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
    inputs:
      parameters:
      - name: revision
        value: "{{ tpl $v.source.revision $dot | default "main" }}"
      {{- if eq "terraform" $type }}
      - name: action
        value: {{ $v.terraform.action }}
      {{- end }}
      - name: path
        value: {{ tpl $v.source.path $dot }}
      artifacts:
      - name: argo-source
        path: "/src"
        git:
          repo: "{{ $v.source.repo }}"
          revision: "{{ "{{" }}inputs.parameters.revision{{ "}}" }}"
    script:
      {{- $imageName := $dot.Values.global.workflow.terragrunt.image }}
      {{- if $v.script }}{{ if $v.script.image }}
      {{- $imageName = $v.script.image }}
      {{- end }}{{- end }}
      image: {{ tpl $imageName $dot }}
      command: [bash]
      workingDir: "/src"
      source: |
        #!/usr/bin/env bash
        set -o errexit
        set -o pipefail
        set -o nounset
        cd {{ "{{" }}inputs.parameters.path{{ "}}" }}
        {{- range $index, $var := $v.extraSourceElements }}
        {{ tpl $var $dot}}
        {{- end }}
        export VAULT_TOKEN=$(cat /vault/secrets/token)
        {{- if eq "terraform" $type }}
        terragrunt {{ "{{" }}inputs.parameters.action{{ "}}" }} -input=false -auto-approve -no-color
        {{- end }}
        {{- with $v.script.source }}
        {{ . | nindent 8 }}
        {{- end }}
      env:
        - name: AWS_SHARED_CREDENTIALS_FILE
          value: /vault/secrets/s3access
        {{- range $index, $var := $v.extraEnv }}
        - name: {{ tpl $var.name $dot}}
          value: {{ tpl $var.value $dot}}
        {{- end }}
      envFrom:
        - configMapRef:
            name: tf-static-endpoints
        {{- range $index, $envFrom := $v.extraEnvFrom }}
        - {{ toYaml $envFrom | nindent 10 -}}
        {{- end }}            
---
apiVersion: argoproj.io/v1alpha1
kind: Workflow
metadata:
  name: {{$k}}
  labels:
    {{- include "argo-workflows-execution.labels" $dot | nindent 4 }}
  annotations:
    argocd.argoproj.io/sync-wave: "5"
    {{- $argocdHook := $dot.Values.global.argocd.hook }}
    {{- if $v.script }}{{ if $v.argocdHook }}
    {{- $argocdHook = $v.argocdHook }}
    {{- end }}{{- end }}    
    argocd.argoproj.io/hook: {{ tpl $argocdHook $dot}}
spec:
  entrypoint: exec
  templates:
  - name: exec
    steps:
      - - name: configure-service
          templateRef:
            name: {{$k}}
            template: exec
{{- end -}}
